% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/secure-app.R
\name{secure-app}
\alias{secure-app}
\alias{secure_app}
\alias{secure_server}
\title{Secure a Shiny application and manage authentication}
\usage{
secure_app(ui, ..., enable_admin = FALSE, head_auth = NULL)

secure_server(check_credentials,
  session = shiny::getDefaultReactiveDomain())
}
\arguments{
\item{ui}{UI of the application.}

\item{...}{Arguments passed to \code{\link{auth_ui}}.}

\item{enable_admin}{Enable or not access to admin mode, note that
admin mode is only available using a SQLite backend for credentials.}

\item{head_auth}{Tag or list of tags to use in the \code{<head>}
of the authentication page (for custom CSS for example).}

\item{check_credentials}{Function passed to \code{\link{auth_server}}.}

\item{session}{Shiny session.}
}
\description{
Secure a Shiny application and manage authentication
}
\examples{
if (interactive()) {

  # define some credentials
  credentials <- data.frame(
    user = c("shiny", "shinymanager"),
    password = c("azerty", "12345"),
    stringsAsFactors = FALSE
  )

  library(shiny)
  library(shinymanager)

  ui <- fluidPage(
    tags$h2("My secure application"),
    verbatimTextOutput("auth_output")
  )

  # Wrap your UI with secure_app
  ui <- secure_app(ui)


  server <- function(input, output, session) {

    # call the server part
    # check_credentials returns a function to authenticate users
    res_auth <- secure_server(
      check_credentials = check_credentials(credentials)
    )

    output$auth_output <- renderPrint({
      reactiveValuesToList(res_auth)
    })

    # your classic server logic

  }

  shinyApp(ui, server)

}
}
